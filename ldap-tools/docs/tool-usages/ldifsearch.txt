Usage for ldifsearch:

Search one or more LDIF files to identify entries matching a given set of
criteria.

Usage:  ldifsearch {options} [filter] [attributes...]

Available options include:

  Input Arguments

  * -l, --ldifFile {path}
        the path to an LDIF file containing the entries to search.  This must
        be provided at least once, but if multiple files are given, they will
        be searched in the order provided.  The file may optionally be
        compressed or encrypted.
    --ldifEncryptionPassphraseFile {path}
        The path to the file containing the passphrase used to encrypt the
        contents of the input LDIF files.  If this argument is provided, the
        file must exist and must contain exactly one line that contains only
        the encryption passphrase.  If the input LDIF file is encrypted but
        this argument is not provided, then the tool will interactively prompt
        for the passphrase.
    --stripTrailingSpaces
        Strip off any illegal trailing spaces identified in LDIF entries rather
        than rejecting those entries.
    --schemaPath {path}
        The path to an LDIF file (or a directory containing multiple LDIF
        files) with the schema definitions to use during processing.  This
        argument may be used multiple times to specify multiple schema paths.
        If this argument is ot provided, the LDAP SDK's default standard schema
        will be used.
    --checkSchema
        Indicates whether to validate each entry read from an LDIF file to
        ensure that it conforms to the defined schema.  If this argument is
        provided, an error will be reported for every entry that does not
        conform to the schema.

  Output Arguments

    -o, --outputFile {path}
        The path to an output file to which matching entries will be written.
        If this is not provided, then matching entries will be written to
        standard output.
    --separateOutputFilePerSearch
        Use a separate output LDIF file for each search filter.  This argument
        is only applicable if either the --filterFile or --ldapURLFile argument
        is provided to specify multiple sets of search criteria.  If this
        argument is given, then each output file will use the path specified by
        the --outputFile argument, followed by a period and a number indicating
        which search criteria is being used (e.g., '.1'; for the first set of
        search criteria, '.2' for the second, and so on).
    --compressOutput
        GZIP-compress the data as it is written to each output file.
    --encryptOutput
        Encrypt the data as it is written to each output file.  If the
        '--outputEncryptionPassphraseFile' argument is provided, then the
        passphrase contained in that file will be used to encrypt the output.
        Otherwise, the tool will interactively prompt for the passphrase.
    --outputEncryptionPassphraseFile {path}
        The path to a file containing the passphrase to use to encrypt the
        contents of the output files.  If this argument is provided, then the
        file must exist, and it must contain exactly one line comprised
        entirely of the encryption passphrase.
    -O, --overwriteExistingOutputFile
        Overwrite any output file that already exists, rather than appending to
        it.  This argument must be provided if the output file already exists
        and either of the '--compressOutput' or '--encryptOutput' arguments is
        provided.
    --outputFormat
    {ldif|json|csv|multi-valued-csv|tab-delimited|multi-valued-tab-delimited|dn
    s-only|values-only}
        Specifies the format that should be used for the output generated by
        this tool.  Allowed values are 'LDIF' (LDAP Data Interchange Format,
        which is the standard string representation for LDAP data), 'JSON'
        (JavaScript Object Notation, which is a popular format used by web
        services), 'CSV' (comma-separated values, which is a commonly used
        format for text processing, with only a single value per attribute),
        'multi-valued-csv' (comma-separated values with a vertical bar between
        values of multivalued attributes), 'tab-delimited' (another commonly
        used general text format, with only a single value per attribute),
        'multi-valued-tab-delimited' (tab-delimited text with a vertical bar
        between values of multivalued attributes), 'dns-only' (in which only
        the DN of each matching entry will be written on a line by itself with
        no information about the entry's attributes), and 'values-only' (in
        which each value returned will be written on a line by itself with no
        attribute names, entry DNs, or delimiters between entries).  If the
        single-valued or multivalued CSV or tab-delimited formats are used then
        there must be a specific set of attributes requested, and the order in
        which values are returned will match the order in which they are
        requested.  Further, the CSV and tab-delimited formats cannot be used
        in conjunction with the '--ldapURLFile' argument.  If no output format
        is specified, a default of 'LDIF' will be used.
    --wrapColumn {value}
        The column at which long lines should be wrapped.  By default, long
        lines will be wrapped based on the terminal width (or 80 columns if the
        terminal width cannot be determined).
    -T, --doNotWrap
        Do not wrap long lines as they are written.

  Search Criteria Arguments

    -b, --baseDN {dn}
        The base DN to use when searching for matching entries.  This argument
        must not be provided if the --ldapURLFile argument is given, as the
        base DN from each URL will be used.  If no LDAP URL file is given and
        this argument is not provided, then the null DN will be used as the
        search base.
    -s, --scope {base|one|sub|subordinates}
        The scope to use when searching for matching entries.  This argument
        must not be provided if the --ldapURLFile argument is given, as the
        scope from each URL will be used.  If no LDAP URL file is given and
        this argument is not provided, then a default scope of 'sub' will be
        used.
    -f, --filterFile {path}
        The path to a file containing one or more search filters (each on a
        separate line) to use to identify matching entries.  If neither this
        argument nor the --ldapURLFile argument is provided, then the filter
        must be provided as the first trailing argument.
    --ldapURLFile {path}
        The path to a file containing one or more LDAP URLs (each on a separate
        line) with the criteria to use to identify matching entries.  Note that
        only the base DN, scope, filter, and requested attributes will be used
        from the LDAP URLs; the server address and port (if any) will be
        ignored.  If neither this argument nor the --filterFile argument is
        provided, then the filter must be provided as the first trailing
        argument.

  Usage Arguments

    --interactive
        Launch the tool in interactive mode.
    -H, --help
        Display usage information for this program.
    -V, --version
        Display version information for this program.
    --propertiesFilePath {path}
        The path to a properties file used to specify default values for
        arguments not supplied on the command line.
    --generatePropertiesFile {path}
        Write an empty properties file that may be used to specify default
        values for arguments.
    --noPropertiesFile
        Do not obtain any argument values from a properties file.
    --suppressPropertiesFileComment
        Suppress output listing the arguments obtained from a properties file.

  * Indicates the argument is required

Examples

  Search for entries with a uid value of 'jdoe' in the data.ldif file.  The
  matching entries will be written to standard output.

    ldifsearch --ldifFile data.ldif "(uid=jdoe)"

  Search for all entries with the 'person' object class below
  'dc=example,dc=com' in the data.ldif file.  Write the matching entries to the
  'people.ldif' file, but only include the 'givenName', 'sn', and 'cn'
  attributes.

    ldifsearch --ldifFile data.ldif --outputFile people.ldif \
         --baseDN dc=example,dc=com --scope sub "(objectClass=person)" \
         givenName sn cn
