Usage for validate-ldif:

Validate the contents of an LDIF file against the server schema.

Usage:  validate-ldif {options}

Available options include:

  LDAP Connection and Authentication Arguments

    -h, --hostname {host}
        The IP address or resolvable name to use to connect to the directory
        server.  If this is not provided, then a default value of 'localhost'
        will be used.
    -p, --port {port}
        The port to use to connect to the directory server.  If this is not
        provided, then a default value of 389 will be used.
    -D, --bindDN {dn}
        The DN to use to bind to the directory server when performing simple
        authentication.
    -w, --bindPassword {password}
        The password to use to bind to the directory server when performing
        simple authentication or a password-based SASL mechanism.
    -j, --bindPasswordFile {path}
        The path to the file containing the password to use to bind to the
        directory server when performing simple authentication or a
        password-based SASL mechanism.
    --promptForBindPassword
        Indicates that the tool should interactively prompt the user for the
        bind password.
    -Z, --useSSL
        Use SSL when communicating with the directory server.
    -q, --useStartTLS
        Use StartTLS when communicating with the directory server.
    --defaultTrust
        Use the JVM's default trust store, and optionally an additional trust
        store specified using the --trustStorePath argument, to
        non-interactively determine whether to trust any certificate chain
        presented during TLS negotiation.  If the chain cannot be trusted based
        on any of those sources, then negotiation will fail without prompting
        about whether to trust it.
    -X, --trustAll
        Trust any certificate presented by the directory server.
    -K, --keyStorePath {path}
        The path to the file to use as the key store for obtaining client
        certificates when communicating securely with the directory server.
    -W, --keyStorePassword {password}
        The password to use to access the key store contents.
    -u, --keyStorePasswordFile {path}
        The path to the file containing the password to use to access the key
        store contents.
    --promptForKeyStorePassword
        Indicates that the tool should interactively prompt the user for the
        password to use to access the key store contents.
    --keyStoreFormat {format}
        The format (e.g., JKS, PKCS12, PKCS11, BCFKS, etc.) for the key store
        file.
    -P, --trustStorePath {path}
        The path to the file to use as trust store when determining whether to
        trust a certificate presented by the directory server.
    -T, --trustStorePassword {password}
        The password to use to access the trust store contents.
    -U, --trustStorePasswordFile {path}
        The path to the file containing the password to use to access the trust
        store contents.
    --promptForTrustStorePassword
        Indicates that the tool should interactively prompt the user for the
        password to use to access the trust store contents.
    --trustStoreFormat {format}
        The format (e.g., JKS, PKCS12, PKCS11, BCFKS, etc.) for the trust store
        file.
    -N, --certNickname {nickname}
        The nickname (alias) of the client certificate in the key store to
        present to the directory server for SSL client authentication.
    --enableSSLDebugging
        Enable Java's low-level support for debugging SSL/TLS communication.
        This is equivalent to setting the 'javax.net.debug' property to 'all'.
    -o, --saslOption {name=value}
        A name-value pair providing information to use when performing SASL
        authentication.
    --useSASLExternal
        Use the SASL EXTERNAL mechanism to authenticate.
    --helpSASL
        Provide information about the supported SASL mechanisms, including the
        properties available for use with each.

  Validation Strictness Arguments

    --ignoreDuplicateValues
        Ignore validation failures due to entries containing duplicate values
        for the same attribute.
    --ignoreUndefinedObjectClasses
        Ignore validation failures due to object classes not defined in the
        schema.
    --ignoreUndefinedAttributes
        Ignore validation failures due to attributes not defined in the
        schema.
    --ignoreMalformedDNs
        Ignore validation failures due to entries with malformed DNs.
    --ignoreMissingRDNValues
        Ignore validation failures due to entries with RDN attribute values
        that are missing from the set of entry attributes.
    --ignoreStructuralObjectClasses
        Ignore validation failures due to entries without exactly structural
        object class.
    --ignoreProhibitedObjectClasses
        Ignore validation failures due to entries with object classes that are
        not allowed.
    --ignoreMissingSuperiorObjectClasses
        Ignore validation failures due to entries that are one or more superior
        object classes.
    --ignoreProhibitedAttributes
        Ignore validation failures due to entries with attributes that are not
        allowed.
    --ignoreMissingAttributes
        Ignore validation failures due to entries missing required attributes.
    --ignoreSingleValuedAttributes
        Ignore validation failures due to entries with multiple values for
        single-valued attributes.
    --ignoreAttributeSyntax
        Ignore validation failures due to entries with attribute values that
        violate their associated syntax.  If this is provided, then no
        attribute syntax violations will be flagged.  If this is not provided,
        then all attribute syntax violations will be flagged except for
        violations in those attributes excluded by the
        --ignoreSyntaxViolationsForAttribute argument.
    --ignoreSyntaxViolationsForAttribute {attr}
        The name or OID of an attribute for which to ignore validation failures
        due to violations of the associated attribute syntax.  This argument
        can only be used if the --ignoreAttributeSyntax argument is not
        provided.
    --ignoreNameForms
        Ignore validation failures due to entries with RDNs that violate the
        associated name form definition.

  Other Arguments

  * -f, --ldifFile {path}
        The path to the LDIF file to process.  The tool will automatically
        attempt to detect whether the file is encrypted or compressed.
    --encryptionPassphraseFile {path}
        Indicates that the specified LDIF file is encrypted and that the
        encryption passphrase is contained in the specified file.  If the LDIF
        data is encrypted and this argument is not provided, then the tool will
        interactively prompt for the encryption passphrase.
    -R, --rejectFile {path}
        The path to the file to which rejected entries should be written.
    --schemaDirectory {path}
        The path to a directory containing one or more LDIF files with the
        schema information to use.  If this is provided, then no LDAP
        communication will be performed.
    -t, --numThreads {num}
        The number of threads to use when processing the LDIF file.

  Usage Arguments

    --interactive
        Launch the tool in interactive mode.
    --outputFile {path}
        Write all standard output and standard error messages to the specified
        file instead of to the console.
    --appendToOutputFile
        Indicates that the tool should append to the file specified by the
        --outputFile argument if it already exists.  If this argument is not
        provided and the output file already exists, it will be overwritten.
    --teeOutput
        Write all standard output and standard error messages to the console as
        well as to the specified output file.  The --outputFile argument must
        also be provided.
    -H, --help
        Display usage information for this program.
    -V, --version
        Display version information for this program.
    --propertiesFilePath {path}
        The path to a properties file used to specify default values for
        arguments not supplied on the command line.
    --generatePropertiesFile {path}
        Write an empty properties file that may be used to specify default
        values for arguments.
    --noPropertiesFile
        Do not obtain any argument values from a properties file.
    --suppressPropertiesFileComment
        Suppress output listing the arguments obtained from a properties file.

  * Indicates the argument is required

Examples

  Validate the contents of the 'data.ldif' file using the schema defined in the
  specified directory server using four concurrent threads.  All types of
  validation will be performed, and information about any errors will be
  written to the 'rejects.ldif' file.

    validate-ldif --hostname server.example.com --port 389 \
         --ldifFile data.ldif --rejectFile rejects.ldif --numThreads 4

  Validate the contents of the 'data.ldif' file using the schema defined in
  LDIF files contained in the /ds/config/schema directory using a single
  thread.  Any errors resulting from entries that do not have exactly one
  structural object class or from values which violate the syntax for their
  associated attribute types will be ignored.  Information about any other
  failures will be written to the 'rejects.ldif' file.

    validate-ldif --schemaDirectory /ds/config/schema --ldifFile data.ldif \
         --rejectFile rejects.ldif --ignoreStructuralObjectClasses \
         --ignoreAttributeSyntax
