Usage for generate-source-from-schema:

Generate source code for a Java class that may be used to represent data stored
in an LDAP directory server.  The source code will be generated using
information read from the directory server schema, and will contain an
appropriate set of annotations required to use that class with the LDAP SDK
persistence framework.

Usage:  generate-source-from-schema {options}

Available options include:

  LDAP Connection and Authentication Arguments

    -h, --hostname {host}
        The IP address or resolvable name to use to connect to the directory
        server.  If this is not provided, then a default value of 'localhost'
        will be used.
    -p, --port {port}
        The port to use to connect to the directory server.  If this is not
        provided, then a default value of 389 will be used.
    -D, --bindDN {dn}
        The DN to use to bind to the directory server when performing simple
        authentication.
    -w, --bindPassword {password}
        The password to use to bind to the directory server when performing
        simple authentication or a password-based SASL mechanism.
    -j, --bindPasswordFile {path}
        The path to the file containing the password to use to bind to the
        directory server when performing simple authentication or a
        password-based SASL mechanism.
    --promptForBindPassword
        Indicates that the tool should interactively prompt the user for the
        bind password.
    -Z, --useSSL
        Use SSL when communicating with the directory server.
    -q, --useStartTLS
        Use StartTLS when communicating with the directory server.
    --defaultTrust
        Use the JVM's default trust store, and optionally an additional trust
        store specified using the --trustStorePath argument, to
        non-interactively determine whether to trust any certificate chain
        presented during TLS negotiation.  If the chain cannot be trusted based
        on any of those sources, then negotiation will fail without prompting
        about whether to trust it.
    -X, --trustAll
        Trust any certificate presented by the directory server.
    -K, --keyStorePath {path}
        The path to the file to use as the key store for obtaining client
        certificates when communicating securely with the directory server.
    -W, --keyStorePassword {password}
        The password to use to access the key store contents.
    -u, --keyStorePasswordFile {path}
        The path to the file containing the password to use to access the key
        store contents.
    --promptForKeyStorePassword
        Indicates that the tool should interactively prompt the user for the
        password to use to access the key store contents.
    --keyStoreFormat {format}
        The format (e.g., JKS, PKCS12, PKCS11, BCFKS, etc.) for the key store
        file.
    -P, --trustStorePath {path}
        The path to the file to use as trust store when determining whether to
        trust a certificate presented by the directory server.
    -T, --trustStorePassword {password}
        The password to use to access the trust store contents.
    -U, --trustStorePasswordFile {path}
        The path to the file containing the password to use to access the trust
        store contents.
    --promptForTrustStorePassword
        Indicates that the tool should interactively prompt the user for the
        password to use to access the trust store contents.
    --trustStoreFormat {format}
        The format (e.g., JKS, PKCS12, PKCS11, BCFKS, etc.) for the trust store
        file.
    -N, --certNickname {nickname}
        The nickname (alias) of the client certificate in the key store to
        present to the directory server for SSL client authentication.
    --enableSSLDebugging
        Enable Java's low-level support for debugging SSL/TLS communication.
        This is equivalent to setting the 'javax.net.debug' property to 'all'.
    -o, --saslOption {name=value}
        A name-value pair providing information to use when performing SASL
        authentication.
    --useSASLExternal
        Use the SASL EXTERNAL mechanism to authenticate.
    --helpSASL
        Provide information about the supported SASL mechanisms, including the
        properties available for use with each.

  Other Arguments

    -d, --outputDirectory {path}
        The path of the directory into which the generated source file should
        be written.  If this is not provided, then the source file will be
        created in the current working directory.  If a value is provided, then
        the specified path must exist and must be a directory.
  * -s, --structuralClass {name}
        The name of the structural object class to use for the object.  This
        must be provided, and the value must be the name or OID of a structural
        object class defined in the directory server schema.
    -a, --auxiliaryClass {name}
        The name of the auxiliary object class to use for the object.  This is
        optional, and it may be provided multiple times to specify multiple
        auxiliary object classes.  Any values that are provided must be the
        name or OID of an auxiliary object class defined in the directory
        server schema.
  * -r, --rdnAttribute {name}
        The name of an LDAP attribute to include in the RDN for entries created
        from the generated object.  This must be provided, and the value must
        be the name or OID of an attribute type that is referenced by one of
        the structural or auxiliary object classes.
    -l, --lazyAttribute {name}
        The name of an LDAP attribute that should be lazily-loaded from the
        directory.  This may be provided more than once to request multiple
        lazily-loaded attributes.
    -O, --operationalAttribute {name}
        The name of an LDAP operational attribute that should be made available
        as a field in the generated source file.  This may be provided more
        than once to request multiple operational attributes.
    -b, --defaultParentDN {dn}
        The default parent DN to use for the generated class.  Entries created
        from objects of that class will be placed below this parent DN unless
        an alternate parent DN is specified when requesting the operation.
    -n, --packageName {name}
        The name of the package to use for the generated source file.  If this
        is not provided, then the class will be placed in the default
        (top-level) package.
    -c, --className {name}
        The unqualified name of the class to use for the generated source file.
        If this is not provided, then it will be generated from the name of the
        structural object class.
    -t, --terse
        Generate terse output with a minimal set of elements present in the
        generated classes.

  Usage Arguments

    --interactive
        Launch the tool in interactive mode.
    --outputFile {path}
        Write all standard output and standard error messages to the specified
        file instead of to the console.
    --appendToOutputFile
        Indicates that the tool should append to the file specified by the
        --outputFile argument if it already exists.  If this argument is not
        provided and the output file already exists, it will be overwritten.
    --teeOutput
        Write all standard output and standard error messages to the console as
        well as to the specified output file.  The --outputFile argument must
        also be provided.
    -H, --help
        Display usage information for this program.
    -V, --version
        Display version information for this program.
    --propertiesFilePath {path}
        The path to a properties file used to specify default values for
        arguments not supplied on the command line.
    --generatePropertiesFile {path}
        Write an empty properties file that may be used to specify default
        values for arguments.
    --noPropertiesFile
        Do not obtain any argument values from a properties file.
    --suppressPropertiesFileComment
        Suppress output listing the arguments obtained from a properties file.

  * Indicates the argument is required

Examples

  Generate a 'src/com/example/MyObject.java' source file from the information
  contained in the 'myStructuralClass' structural object class, as well as the
  'auxClass1' and 'auxClass2' auxiliary classes.  Entries created from this
  object will use an RDN attribute of 'cn' and will be created below
  'dc=example,dc=com' by default.

    generate-source-from-schema --hostname server.example.com --port 389 \
         --bindDN uid=admin,dc=example,dc=com --bindPassword password \
         --outputDirectory src/com/example \
         --structuralClass myStructuralClass --auxiliaryClass auxClass1 \
         --auxiliaryClass auxClass2 --rdnAttribute cn \
         --defaultParentDN dc=example,dc=com --packageName com.example \
         --className MyObject
